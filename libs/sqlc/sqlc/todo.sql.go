// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: todo.sql

package db

import (
	"context"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    text,
    owner_id
) VALUES (
    $1, $2
) RETURNING id, text, done, created_at, owner_id
`

type CreateTodoParams struct {
	Text    string `json:"text"`
	OwnerID int64  `json:"owner_id"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.Text, arg.OwnerID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Done,
		&i.CreatedAt,
		&i.OwnerID,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, text, done, created_at, owner_id FROM todos
WHERE owner_id = $1
ORDER BY created_at
`

func (q *Queries) GetTodos(ctx context.Context, ownerID int64) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Done,
			&i.CreatedAt,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
